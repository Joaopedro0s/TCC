document.addEventListener('DOMContentLoaded', function() {
    // ============== ELEMENTOS DO DOM ==============
    const loginBtn = document.getElementById('loginBtn');
    const logoutBtn = document.getElementById('logoutBtn');
    const loginModal = document.getElementById('loginModal');
    const registerModal = document.getElementById('registerModal');
    const closeButtons = document.querySelectorAll('.close');
    const registerBtn = document.getElementById('registerBtn');
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    
    // Elementos de perfil
    const userAvatar = document.getElementById('userAvatar');
    const userName = document.getElementById('userName');
    const userLevel = document.getElementById('userLevel');
    
    // Elementos de progresso
    const unit1Correct = document.getElementById('unit1Correct');
    const unit1Wrong = document.getElementById('unit1Wrong');
    const unit2Correct = document.getElementById('unit2Correct');
    const unit2Wrong = document.getElementById('unit2Wrong');
    const unit1CorrectText = document.getElementById('unit1CorrectText');
    const unit1WrongText = document.getElementById('unit1WrongText');
    const unit2CorrectText = document.getElementById('unit2CorrectText');
    const unit2WrongText = document.getElementById('unit2WrongText');
    const nextChallenges = document.getElementById('nextChallenges');
    
    // Cita√ß√µes motivacionais
    const dailyQuote = document.getElementById('dailyQuote');
    const quoteAuthor = document.getElementById('quoteAuthor');

    // ============== VARI√ÅVEIS GLOBAIS ==============
    let currentUser = null;

    // ============== FUN√á√ïES PRINCIPAIS ==============

    // üîÑ Verifica se o usu√°rio est√° logado
    async function checkLoggedIn() {
        const userData = localStorage.getItem('currentUser');
        if (userData) {
            currentUser = JSON.parse(userData);
            updateUserProfile(currentUser);
            await loadUserStats(currentUser.id);
            loginBtn.style.display = 'none';
            logoutBtn.style.display = 'block';
        } else {
            resetUI();
        }
    }

    // üìä Carrega estat√≠sticas do usu√°rio
    async function loadUserStats(userId) {
        try {
            const response = await fetch(`http://localhost/api/estatisticas.php?user_id=${userId}`);
            const stats = await response.json();
            updateProgressBars(stats);
        } catch (error) {
            console.error("Erro ao carregar estat√≠sticas:", error);
        }
    }

    // üë§ Atualiza o perfil do usu√°rio
    function updateUserProfile(user) {
        userAvatar.textContent = user.nome.charAt(0).toUpperCase();
        userName.textContent = user.nome;
        userLevel.textContent = `N√≠vel: ${user.nivel || 'Iniciante'}`;
        
        // Cor do avatar baseada no n√≠vel
        const avatarColors = {
            'Iniciante': '#48bb78', // Verde
            'Intermedi√°rio': '#4299e1', // Azul
            'Avan√ßado': '#9f7aea' // Roxo
        };
        userAvatar.style.backgroundColor = avatarColors[user.nivel] || '#48bb78';
    }

    // üìà Atualiza as barras de progresso
    function updateProgressBars(stats) {
        // Unidade 1
        const unit1Total = (stats.unit1?.acertos || 0) + (stats.unit1?.erros || 0);
        const unit1CorrectPercent = unit1Total > 0 ? Math.round((stats.unit1?.acertos || 0) / unit1Total * 100) : 0;
        
        unit1Correct.style.width = `${unit1CorrectPercent}%`;
        unit1Wrong.style.width = `${100 - unit1CorrectPercent}%`;
        unit1CorrectText.textContent = `${unit1CorrectPercent}%`;
        unit1WrongText.textContent = `${100 - unit1CorrectPercent}%`;

        // Unidade 2
        const unit2Total = (stats.unit2?.acertos || 0) + (stats.unit2?.erros || 0);
        const unit2CorrectPercent = unit2Total > 0 ? Math.round((stats.unit2?.acertos || 0) / unit2Total * 100) : 0;
        
        unit2Correct.style.width = `${unit2CorrectPercent}%`;
        unit2Wrong.style.width = `${100 - unit2CorrectPercent}%`;
        unit2CorrectText.textContent = `${unit2CorrectPercent}%`;
        unit2WrongText.textContent = `${100 - unit2CorrectPercent}%`;
    }

    // üîÑ Reseta a UI quando n√£o h√° usu√°rio logado
    function resetUI() {
        userAvatar.textContent = '?';
        userName.textContent = 'Visitante';
        userLevel.textContent = 'N√≠vel: ---';
        loginBtn.style.display = 'block';
        logoutBtn.style.display = 'none';
        
        // Reseta barras de progresso
        unit1Correct.style.width = '0%';
        unit1Wrong.style.width = '0%';
        unit2Correct.style.width = '0%';
        unit2Wrong.style.width = '0%';
        unit1CorrectText.textContent = '0%';
        unit1WrongText.textContent = '0%';
        unit2CorrectText.textContent = '0%';
        unit2WrongText.textContent = '0%';
    }

    // ============== EVENT LISTENERS ==============

    // üîë Login
    loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const usuario = document.getElementById('username').value;
        const senha = document.getElementById('password').value;

        try {
            const response = await fetch('http://localhost/api/login.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ usuario, senha })
            });
            
            const data = await response.json();
            
            if (data.sucesso) {
                currentUser = data.usuario;
                localStorage.setItem('currentUser', JSON.stringify(currentUser));
                loginModal.style.display = 'none';
                await checkLoggedIn();
            } else {
                alert('Usu√°rio ou senha incorretos!');
            }
        } catch (error) {
            console.error("Erro no login:", error);
            alert('Erro ao conectar com o servidor');
        }
    });

    // ‚úçÔ∏è Registro
    registerForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const nome = document.getElementById('regName').value;
        const usuario = document.getElementById('regUsername').value;
        const senha = document.getElementById('regPassword').value;

        try {
            const response = await fetch('http/localhost/api/registro.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ nome, usuario, senha })
            });
            
            const data = await response.json();
            
            if (data.sucesso) {
                alert('Registro realizado com sucesso! Fa√ßa login.');
                registerModal.style.display = 'none';
                loginModal.style.display = 'block';
            } else {
                alert('Erro no registro: Usu√°rio j√° existe ou dados inv√°lidos');
            }
        } catch (error) {
            console.error("Erro no registro:", error);
            alert('Erro ao conectar com o servidor');
        }
    });

    // üö™ Logout
    logoutBtn.addEventListener('click', () => {
        localStorage.removeItem('currentUser');
        currentUser = null;
        checkLoggedIn();
    });

    // ‚úñÔ∏è Fechar modais
    closeButtons.forEach(button => {
        button.addEventListener('click', () => {
            loginModal.style.display = 'none';
            registerModal.style.display = 'none';
        });
    });

    // üñ±Ô∏è Abrir modais
    loginBtn.addEventListener('click', () => {
        loginModal.style.display = 'block';
    });

    registerBtn.addEventListener('click', (e) => {
        e.preventDefault();
        loginModal.style.display = 'none';
        registerModal.style.display = 'block';
    });

    // ============== INICIALIZA√á√ÉO ==============
    checkLoggedIn();
    showRandomQuote();
    showRandomChallenges();

    // ============== FUN√á√ïES AUXILIARES ==============
    
    // üí¨ Mostra cita√ß√£o aleat√≥ria
    function showRandomQuote() {
        const quotes = [
            { text: "A matem√°tica √© a linguagem do universo.", author: "Galileo Galilei" },
            { text: "Sem matem√°tica, n√£o h√° nada que voc√™ possa fazer.", author: "Stephen Hawking" },
            { text: "A matem√°tica √© a rainha das ci√™ncias.", author: "Carl Friedrich Gauss" }
        ];
        const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
        dailyQuote.textContent = `"${randomQuote.text}"`;
        quoteAuthor.textContent = `- ${randomQuote.author}`;
    }

    // üéØ Mostra desafios aleat√≥rios
    function showRandomChallenges() {
        const challenges = [
            "Multiplica√ß√£o Avan√ßada",
            "Divis√£o B√°sica",
            "Fra√ß√µes",
            "Geometria Espacial"
        ];
        nextChallenges.innerHTML = '';
        
        // Seleciona 3 desafios aleat√≥rios
        const shuffled = [...challenges].sort(() => 0.5 - Math.random());
        const selected = shuffled.slice(0, 3);
        
        selected.forEach(challenge => {
            const li = document.createElement('li');
            li.textContent = challenge;
            nextChallenges.appendChild(li);
        });
    }

    // ============== EXEMPLO: REGISTRAR ACERTO/ERRO ==============
    // (Chame esta fun√ß√£o quando o usu√°rio responder uma quest√£o)
    async function registerAnswer(unidade, acertou) {
        if (!currentUser) return;
        
        try {
            const response = await fetch('http://localhost/api/estatisticas.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    id_usuario: currentUser.id,
                    unidade: unidade,
                    tipo: acertou ? 'acerto' : 'erro'
                })
            });
            
            const data = await response.json();
            if (data.sucesso) {
                await loadUserStats(currentUser.id); // Atualiza estat√≠sticas
            }
        } catch (error) {
            console.error("Erro ao registrar resposta:", error);
        }
    }

    // Exemplo de uso:
    // registerAnswer(1, true); // Acerto na Unidade 1
    // registerAnswer(2, false); // Erro na Unidade 2
});